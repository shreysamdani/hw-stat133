strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
string_dists <- rep(0,length(strings))
for (s in 1:length(strings)) {
string_dists[s] = get_dist(distances, strings[s])
}
strings[4]
strings
get_dist <- function(dists, ltrs) {
if (!all(ltrs %in% LETTERS)) {
stop('Unrecognized character')
}
sum_dist <- 0
for (l in 1:(length(ltrs)-1)) {
from <- ltrs[l]
to <- ltrs[l+1]
sum_dist <- sum_dist + dists[from,to]
}
return(sum_dist)
}
cal = c('C', 'A', 'L')
stats = c('S', 'T', 'A', 'T', 'S')
oski = c('O', 'S', 'K', 'I')
zzz = rep('Z', 3)
lets = LETTERS
first = c('S','H','R','E','Y')
last = c('S','A','M','D','A','N','I')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
string_dists <- rep(0,length(strings))
for (s in 1:length(strings)) {
string_dists[s] = get_dist(distances, strings[[s]])
}
string_dists
get_dist <- function(dists, ltrs) {
if (!all(ltrs %in% LETTERS)) {
stop('Unrecognized character')
}
sum_dist <- 0
for (l in 1:(length(ltrs)-1)) {
from <- ltrs[l]
to <- ltrs[l+1]
sum_dist <- sum_dist + dists[from,to]
}
return(sum_dist)
}
cal = c('C', 'A', 'L')
stats = c('S', 'T', 'A', 'T', 'S')
oski = c('O', 'S', 'K', 'I')
zzz = rep('Z', 3)
lets = LETTERS
first = c('S','H','R','E','Y')
last = c('S','A','M','D','A','N','I')
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
string_dists <- rep(0,length(strings))
for (s in 1:length(strings)) {
string_dists[s] = get_dist(distances, strings[[s]])
}
print(string_dists)
install.packages("testthat")
setwd("~/GoogleDrive/spring2018/stat133/stat133-hw/hw03")
knitr::opts_chunk$set(echo = T, error = T, fig.path = 'images/')
knitr::opts_chunk$set(echo = T, error = T, fig.path = 'images/')
1L
1L %% 1
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
print(is_integer(-1))
print(is_integer(pi))
print(is_integer(1L))
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
is_nonnegative(0)
is_nonnegative(-.0001)
is_nonnegative(-2)
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_nonnegative <- function(x) {
is_positive(x) && is_integer(x)
}
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_positive_integer <- function(x) {
is_positive(x) && is_integer(x)
}
is_positive_integer(2L)
is_positive_integer(0)
is_positive_integer(-2)
is_positive_integer(-2.9)
is_positive_integer(2.9)
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_positive_integer <- function(x) {
is_positive(x) && is_integer(x)
}
#' @title is_nonneg_integer
#' @description tests if value is a non-negative integer
#' @param x number to be tested
#' @return boolean describing if non-negative integer or not
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_integer(x)
}
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_positive_integer <- function(x) {
is_positive(x) && is_integer(x)
}
#' @title is_nonneg_integer
#' @description tests if value is a non-negative integer
#' @param x number to be tested
#' @return boolean describing if non-negative integer or not
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_integer(x)
}
#' @title is_probability
#' @description tests if value is a probability
#' @param x number to be tested
#' @return boolean describing if probability or not
is_nonnegative <- function(x) {
x >= 0 && x <= 1
}
# TRUE's
is_probability(0)
is_probability(0.5)
is_probability(1)
# FALSE's
is_probability(-1)
is_probability(1.0000001)
#' @title is_probability
#' @description tests if value is a probability
#' @param x number to be tested
#' @return boolean describing if probability or not
is_probability <- function(x) {
x >= 0 && x <= 1
}
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_positive_integer <- function(x) {
is_positive(x) && is_integer(x)
}
#' @title is_nonneg_integer
#' @description tests if value is a non-negative integer
#' @param x number to be tested
#' @return boolean describing if non-negative integer or not
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_integer(x)
}
#' @title is_probability
#' @description tests if value is a probability
#' @param x number to be tested
#' @return boolean describing if probability or not
is_probability <- function(x) {
x >= 0 && x <= 1
}
# TRUE's
is_probability(0)
is_probability(0.5)
is_probability(1)
# FALSE's
is_probability(-1)
is_probability(1.0000001)
#' @title is_integer
#' @description tests if value is an integer
#' @param x number to be tested
#' @return boolean describing if integer or not
is_integer <- function(x) {
x %% 1 == 0
}
#' @title is_positive
#' @description tests if value is positive
#' @param x number to be tested
#' @return boolean describing if positive or not
is_positive <- function(x) {
x > 0
}
#' @title is_nonnegative
#' @description tests if value is nonnegative
#' @param x number to be tested
#' @return boolean describing if nonnegative or not
is_nonnegative <- function(x) {
x >= 0
}
#' @title is_positive_integer
#' @description tests if value is a positive integer
#' @param x number to be tested
#' @return boolean describing if positive integer or not
is_positive_integer <- function(x) {
is_positive(x) && is_integer(x)
}
#' @title is_nonneg_integer
#' @description tests if value is a non-negative integer
#' @param x number to be tested
#' @return boolean describing if non-negative integer or not
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_integer(x)
}
# TRUE's
is_nonneg_integer(0)
is_nonneg_integer(1)
# FALSE
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
#' @title is_probability
#' @description tests if value is a probability
#' @param x number to be tested
#' @return boolean describing if probability or not
is_probability <- function(x) {
x >= 0 && x <= 1
}
#' @title bin_factorial
#' @description calculates the factorial of a nonnegative integer n
#' @param n nonnegative integer
#' @return factorial of n
bin_factorial <- function(n) {
ans <- 1
for (i in 1:n) {
ans = ans * i
}
return (ans)
}
bin_factorial(5)
bin_factorial(0)
1:0
5:0
0:1
0:2
2:0
seq(2,0)
seq(2,0,1)
seq(2,0,by =1)
bin_factorial <- function(n) {
ans <- 1
if (n == 0) {
return (ans)
}
for (i in 1:n) {
ans = ans * i
}
return (ans)
}
bin_factorial(5)
bin_factorial(0)
#' @title bin_combinations
#' @description calculates the numberof combinations in which k successes can occur in n trials
#' @param n number of successes
#' @param k number of trials
#' @return integer answer
bin_combinations <- function(n, k) {
bin_factorial(n)/(bin_factorial(k)*bin_factorial(n-k))
}
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
#' @title bin_probability
#' @description calculates the probability of getting sucess successes in trials trials
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability of success
#' @return probabbility
bin_probability <- function(trials, success, prob) {
bin_combinations(trials, success)*(prob^success)*(prob^(trials-success))
}
bin_probability(trials = 5, success = 2, prob = 0.5)
#' @title bin_distribution
#' @description creates a binomial probability distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return data frame with the probability distribution
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- 0:trials
for (i in probability) {
probability[i] = bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
0:5
#' @title bin_distribution
#' @description creates a binomial probability distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return data frame with the probability distribution
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- 0:trials
for (i in probability) {
probability[i + 1] = bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(trials = 5, prob = 0.5)
source("code/binomial-functions.R")
bin_probability(10,3,1/6)
bin_probability(10,10,1/6)
distribution = bin_distribution(10,0.25)
plot(distribution)
distribution = bin_distribution(10,0.25)
print(sum(distribution$probability))
plot(distribution)
distribution = bin_distribution(10,0.25)
print(distribution)
print(sum(distribution$probability))
plot(distribution)
bin_probability(6,3,1/6)
bin_probability(6,2,1/6)
bin_factorial(6)
bin_combinations(6,3)
binom
dbinom
dbinom(6)
dbinom(6,3)
dbinom(6,3,1/6)
dbinom(3,6,1/6)
dbinom(2,6,1/6)
bin_combinations(6,0)
bin_combinations(6,1)
bin_combinations(6,2)
source("code/binomial-functions.R")
bin_probability(6,2,1/6)
bin_probability(10,3,1/6)
distribution = bin_distribution(10,0.25)
print(distribution)
print(sum(distribution$probability))
plot(distribution)
probability <- 0
for (i in 4:5) {
probability = probability + bin_probability(5,i,0.35)
}
probability <- 0
for (i in 4:5) {
probability = probability + bin_probability(5,i,0.35)
}
probability
probability <- 0
for (i in 0:5) {
probability = probability + bin_probability(5,i,0.35)
}
probability
probability <- 0
for (i in 1:5) {
probability = probability + bin_probability(5,i,0.35)
}
probability
probability <- 0
for (i in 4:5) {
probability = probability + bin_probability(5,i,0.35)
}
probability
distribution = bin_distribution(15,0.35)
plot(distribution)
